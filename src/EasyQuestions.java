public class EasyQuestions
{

	//Just a driver/tester
	public static void main(String[] args)
	{
		System.out.println(largePalindromeProduct());
	}

	//-------------------------------------------------------
	//Question 1
	//If we list all the natural numbers below 10 that are 
	//multiples of 3 or 5, we get 3, 5, 6 and 9. 
	//The sum of these multiples is 23. Find the sum of 
	//all the multiples of 3 or 5 below 1000.
	//-------------------------------------------------------
	public static int mult3and5(int cap)
	{
		int total = 0;
		for(int i = 1; i < cap; i++)
		{
			if(i % 3 == 0 || i % 5 == 0)
				total += i;
		}

		return total;
	}

	//------------------------------------------------------------------------
	//Question 2
	//Each new term in the Fibonacci sequence is generated by adding the
	//previous two terms. By starting with 1 and 2, the first 10 terms will be:
	//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	//By considering the terms in the Fibonacci sequence whose values
	//do not exceed four million, find the sum of the even-valued terms.
	//------------------------------------------------------------------------
	public static int evenFibonacci(int cap)
	{
		int total = 2;
		int x = 1, y = 2;

		while(x + y < cap)
		{	
			if((x + y) % 2 == 0)
				total += x + y;

			if(x > y)
				y = x + y;
			else 
				x = x + y;
		}
		return total;

	}
	//--------------------------------------------------------------
	//Question 3
	//The prime factors of 13195 are 5, 7, 13 and 29.
	//What is the largest prime factor of the number 600851475143 ?
	//--------------------------------------------------------------
	public static long largePrimeFactor(long val)
	{
		long max = 1;
		for(long i = 1; i * i <= val; i++)
		{
			if(isPrime(i) && val % i == 0)
				max = i;
		}

		return max;
	}

	//--------------------------
	//Helper used in question 3
	//--------------------------
	public static boolean isPrime(long num)
	{
		if(num == 2 || num == 3)
			return true;
		else if(num % 2 == 0 || num % 3 == 0)
			return false;

		long i = 5;
		long w = 2;

		while (i * i <= num)
		{
			if(num % i == 0)
				return false;

			i += w;
			w = 6 - w;
		}

		return true;
	}

	//------------------------------------------------------------------------------------
	//Question 4
	//A palindromic number reads the same both ways. The largest palindrome made from the 
	//product of two 2-digit numbers is 9009 = 91 × 99.
	//Find the largest palindrome made from the product of two 3-digit numbers.
	//------------------------------------------------------------------------------------
	public static int largePalindromeProduct()
	{
		int max = 0;
		for(int x = 100; x < 999; x++)
			for(int y = 100; y < 999; y++)
				if(isPalindrome("" + x * y) && x * y > max)
					max = x * y;
		
		return max;
	}
	
	//Helper for question 4
	public static boolean isPalindrome(String str)
	{
		String rev= "";
		for(int c = str.length() - 1; c >= 0; c--)
			rev += str.charAt(c);
		
		return str.equals(rev);
	}
}
